<%= @generator.render_partial('base_header_partial.py.erb') %>

import numpy as np
from numpy import nan
from os import path
from importlib import import_module
from yaml import load, FullLoader
from openmdao.api import <%= @dimpl.implicit_component ? "ImplicitComponent" : "ExplicitComponent" %>


class <%= @discipline.py_classname %>Base(<%= @dimpl.implicit_component ? "ImplicitComponent" : "ExplicitComponent" %>):
    """ An OpenMDAO base component to encapsulate <%= @discipline.py_classname %> discipline """
    def __init__(self, **kwargs):
        super(<%= @discipline.py_classname %>Base, self).__init__(**kwargs)
        self._impl = None
        dockconf = path.join(path.dirname(__file__), ".whatsopt_dock.yml")
        if path.exists(dockconf):
            with open(dockconf) as dockfile:
                dock = load(dockfile, Loader=FullLoader)
                impl = dock.get("<%= @discipline.py_modulename %>")
                if impl:
                    module = import_module(impl['module'])
                    self._impl = getattr(module, impl['class'])()

<% unless @discipline.variables.empty? -%>
    def setup(self):
<% @discipline.input_variables.numeric.each do |var| -%>
        self.add_input('<%= var.py_varname %>', val=<%= var.init_py_value %>, desc='<%= var.escaped_desc %>')
<% end -%>
<% @discipline.output_variables.numeric.each do |var| -%>
<% if var.scaling.blank? %>
        self.add_output('<%= var.py_varname %>', val=<%= var.init_py_value %>, desc='<%= var.escaped_desc %>')
<% else %>
        self.add_output('<%= var.py_varname %>', val=<%= var.init_py_value %>, desc='<%= var.escaped_desc %>',
                        ref=<%= var.scaling_ref_py_value %>, ref0=<%= var.scaling_ref0_py_value %>, res_ref=<%= var.scaling_res_ref_py_value %>)
<% end -%>
<% end %>

<% if @dimpl.support_derivatives -%>
        self.declare_partials('*', '*')
<% end -%>
<% else -%>
    pass
<% end -%>
